// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/PongGame.jack

/**
 * Represents a Pong game.
 */
class PongGame {

    static PongGame instance; // the singelton, a Pong game instance     
    field Bat bat;            // the bat
    field Ball ball;   
    field Laser laser;     // the ball
    field int wall;           // the current wall that the ball is bouncing off of.
    field boolean exit;       // true when the game is over
    field int score;          // the current score.
    field int lastWall;       // the last wall that the ball bounced off of.
    field int velocidad;

    // The current width of the bat
    field int batWidth;

    /** Constructs a new Pong game. */
    constructor PongGame new() {
	    do Screen.clearScreen();
        let batWidth = 50;  // initial bat size
        let bat = Bat.new(230, 229, batWidth, 7);
        let ball = Ball.new(253, 100, 0, 511);
        do ball.setDestination(400);
        let laser = Laser.new(255, 210, 0);
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score: 0");
        do Output.moveCursor(22,10);
	    do Output.printString("Speed: X0");
	
	    let exit = false;
	    let score = 0;
	    let wall = 0;
	    let lastWall = 0;
        let velocidad = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do bat.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of Pong game, and stores it. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** Returns the single instance of this Pong game. */
    function PongGame getInstance() {
        return instance;
    }

    /** Starts the game, and andles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
                do moveBall();
                do laser.move();
                do verificarColision();
                do Sys.wait(50);
            }
            if (key = 131){ do moveLaser(); do laser.setUnico(true); }
            else {
                if (key = 130) { do bat.setDirection(1); }
	            else {
	                if (key = 132) { do bat.setDirection(2); }
		            else {
                        if (key = 81) { let exit = true; }
		            }
                } 
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
                do moveBall();
                do laser.move();
                do Sys.wait(50);
            }
        }

	    if (exit) {
            do Output.moveCursor(12,27);
	        do Output.printString("Game Finished!");
	    }
            
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging. 
     */
    method void moveBall() {
        var int bouncingDirection;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            do ball.bounce(bouncingDirection);
        }
        return;
    }

    method void moveLaser() {
        var int batLeft, batWidth, posx;
        var boolean unico;

        let batLeft = bat.getLeft();
        let batWidth = bat.getWidth();
        let unico = laser.getUnico();
        let posx = batLeft + (batWidth/2);

        if (~unico) {
            do laser.setX(posx);
        }
        do laser.setDirection(1);

        return;
    }

    method void verificarColision() {
        var int ballTop, ballBottom, ballLeft, ballRight, laserTop, laserBottom, laserLeft, laserRight;
        var boolean colision;

        let colision = false;
        let ballTop = ball.getTop();
        let ballBottom = ball.getBottom();
        let ballLeft = ball.getLeft();
        let ballRight = ball.getRight();

        let laserTop = laser.getTop();
        let laserBottom = laser.getBottom();
        let laserLeft = laser.getLeft();
        let laserRight = laser.getRight();

        if ((((laserLeft > ballLeft) & (laserRight < ballRight)) | ((laserLeft > ballLeft) & (laserLeft < ballRight)) | ((laserLeft < ballLeft) & (laserRight > ballLeft))) & (((laserTop < ballBottom) & (laserBottom > ballBottom)) | ((laserTop < ballBottom) & (laserBottom > ballTop)) | ((laserTop < ballTop) & (laserBottom > ballTop)))) {
            let score = score + 1;
            let colision = true;
            do laser.setColision();
            do ball.setColision();
            let velocidad = velocidad + 1;
            do ball.setVelocidad(velocidad);
            do ballBoom();
            do Output.moveCursor(22,7);
            do Output.printInt(score);
            do Output.moveCursor(22,18);
            do Output.printInt(velocidad);
        }

        return;
    }

    method void ballBoom() {
        var int ballLeft;

        let ballLeft = ball.getLeft();

        do Output.moveCursor(12,32);
	    do Output.printString("¡¡¡¡BOOM!!!!");
        do ball.hide();
        do Ball.wait(5);

        if (ballLeft < 128) {
            do ball.setDestination(384);
            do ball.show();
        }
        if ( ((ballLeft > 128) | (ballLeft = 128)) & (ballLeft < 256) )  {
            do ball.setDestination(28);
            do ball.show();
        }
        if ( ((ballLeft > 256) | (ballLeft = 256)) & (ballLeft < 384) )  {
            do ball.setDestination(480);
            do ball.show();
        }
        if ( ((ballLeft > 384) | (ballLeft = 384)) & (ballLeft < 512) )  {
            do ball.setDestination(128);
            do ball.show();
        }
    }

}