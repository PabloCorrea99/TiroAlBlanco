class Ball {

    field int x, y, velocidad;
    field int lengthx;

    field int d;
    field boolean positivex, colision;

    field int leftWall, rightWall;

    field int wall;

    // Construye una nueva bola con la ubicación inicial dada y las ubicaciones de la pared.
    constructor Ball new(int Ax, int Ay, int AleftWall, int ArightWall) {    	
	    let x = Ax;		
	    let y = Ay;
	    let leftWall = AleftWall;
	    let rightWall = ArightWall - 20;   
	    let wall = 0;
        let velocidad = 0;
        do show();
        return this;
    }

    // Desasigna la memoria de la bola.
     method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    // Muestra la bola.
    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    // Esconde la bola.
    method void hide() {
        do Screen.setColor(false);
	    do draw();
        return;
    }

    // Dibuja la bola.
    method void draw() {
	    do Screen.drawRectangle(x, y, x + 20, y + 20);
	    return;
    }

    // Devuelve el borde izquierdo de la bola.
    method int getLeft() {
        return x;
    }

    // Devuelve el borde derecho de la bola.
    method int getRight() {
        return x + 20;
    }

    // Devuelve el borde superior de la bola.
    method int getTop() {
        return y;
    }

    // Devuelve el borde inferior de la bola.
    method int getBottom() {
        return y + 20;
    }

    // Hace que colision sea True.
    method void setColision() {
        let colision = true;
        return;
    }

    // Establece la velocidad de la bola.
    method void setVelocidad(int newVelocidad) {
        let velocidad = newVelocidad;
        return;
    }

    // Calcula y establece el destino de la pelota.
    method void setDestination(int destx) {
        var int dx;
  	    let lengthx = destx - x;
        let dx = Math.abs(lengthx);

	    let positivex = (x < destx);

        let d = dx;

	    return;
    }

    method void setX(int Ax) {
        let x = Ax;
        return;
    }

    // Mueve la pelota una unidad hacia su destino.
    // Si la pelota ha alcanzado una pared, devuelve 0.
    // De lo contrario, devuelve un valor de acuerdo con la pared:
    // 1 (pared izquierda), 2 (pared derecha).
    method int move() {

	    do hide();

        if (positivex) {
            let x = x + 4 + velocidad; 
	    }
	    else {
            let x = x - 4 - velocidad;
	    }

	    if (~(x > leftWall)) {
	        let wall = 1;    
	        let x = leftWall;
	    }
        if (~(x < rightWall)) {
	        let wall = 2;    
	        let x = rightWall;
	    }
        if (colision) {
            do hide();
            do ballBoom();
            let colision = false;
        }
        else {
            do show();
        }

	    return wall;
    }

    // Salta de la pared actual: establece el nuevo destino de la pelota de 
    // acuerdo con la dirección de rebote dada
    // (-1/0/1 = izquierda/centro/derecha).
    method void bounce(int bouncingDirection) {
        var int newx;

	    if (wall = 1) {
	        let newx = 506;
	    }
        else {
            let newx = 0;
        }

        do setDestination(newx);
        return;
    }

    method void ballBoom() {

        if (x < 128) {
            do setX(256);
            do bounce(400);
        }
        if ( ((x > 128) | (x = 128)) & (x < 256) )  {
            do setX(450);
            do bounce(1);
        }
        if ( ((x > 256) | (x = 256)) & (x < 384) )  {
            do setX(20);
            do bounce(500);
        }
        if ( ((x > 384) | (x = 384)) & (x < 512) )  {
            do setX(256);
            do bounce(1);
        }
        else {
            do setX(450);
            do bounce(1);
        }

        return;
    }

}